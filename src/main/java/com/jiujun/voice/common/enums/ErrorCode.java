package com.jiujun.voice.common.enums;

import com.jiujun.voice.common.cmd.vo.BaseRespVO;
import com.jiujun.voice.common.exception.CmdException;

/**
 * 全局交易编码枚举
 * @author Coody
 * @date 2018年10月31日
 */
public enum ErrorCode {
	
	//交易编码
	ERROR_3010(3010, "用户不是首充"),
	//交易编码
	ERROR_3009(3009, "该物品暂时不能赠送"),
	//交易编码
	ERROR_3008(3008, "剩余数量不足"),
	//交易编码
	ERROR_3007(3007, "交易数量不正确"),
	//交易编码
	ERROR_3006(3006, "该礼物不可购买"),
	//交易编码
	ERROR_3005(3005, "提现在每个月25日-31日开放"),
	//交易编码
	ERROR_3004(3004, "正式开放提现时间为2月25日"),
	//交易编码
	ERROR_3003(3003, "红钻余额不足"),
	//交易编码
	ERROR_3002(3002, "请先绑定银行卡"),
	//交易编码
	ERROR_3001(3001, "每次提现最低限额为5000红钻"),
	
	
	//交易编码
	ERROR_2020(2020, "播放通道被占用"),
	//交易编码
	ERROR_2019(2019, "未加入任何房间"),
	//交易编码
	ERROR_2018(2018, "密码不能为空"),
	//交易编码
	ERROR_2017(2017, "修改的人数限制不能小于当前在线人数"),
	//交易编码
	ERROR_2016(2016, "此操作不能针对自己"),
	//交易编码
	ERROR_2015(2015, "房间人员已满"),
	//交易编码
	ERROR_2014(2014, "密码不正确"),
	//交易编码
	ERROR_2013(2013, "余额不足"),
	//交易编码
	ERROR_2012(2012, "礼物价值不存在"),
	//交易编码
	ERROR_2011(2011, "礼物不存在"),
	//交易编码
	ERROR_2010(2010, "只能同时上一个麦哦"),
	//交易编码
	ERROR_2009(2009, "您暂时无法使用此麦"),
	//交易编码
	ERROR_2008(2008, "您暂时无法上麦"),
	//交易编码
	ERROR_2007(2007, "该位置已经被占领了"),
	//交易编码
	ERROR_2006(2006, "该位置已禁用"),
	//交易编码
	ERROR_2005(2005, "您暂时无法进入该房间"),
	//交易编码
	ERROR_2004(2004, "您已经创建过房间了"),
	//交易编码
	ERROR_2003(2003, "房间不存在"),
	//交易编码
	ERROR_2002(2002, "更新话题失败"),
	//交易编码
	ERROR_2001(2001, "初始化房间失败"),
	
	
	//交易编码
	ERROR_1056(1056,"存在敏感词"),
	//交易编码
	ERROR_1055(1055,"该凭据已失效"),
	//交易编码
	ERROR_1054(1054,"产品不存在"),
	//交易编码
	ERROR_1053(1053,"您已填写过邀请码，请勿重复填写"),
	//交易编码
	ERROR_1052(1052,"不能邀请自己"),
	//交易编码
	ERROR_1051(1051,"邀请码不存在"),
	//交易编码
	ERROR_1050(1050,"手机填写错误"),
	//交易编码
	ERROR_1049(1049,"您已绑定手机"),
	//交易编码
	ERROR_1048(1048,"交易失败"),
	//交易编码
	ERROR_1047(1047,"您已不是新用户"),
	//交易编码
	ERROR_1046(1046,"头像下载失败"),
	//交易编码
	ERROR_1045(1045,"您在本房间已被禁言"),
	// 用户模块 ：1000
	ERROR_1044(1044,"手机号未绑定"),
	//交易编码
	ERROR_1043(1043,"最多允许上传九张图片"),
	//交易编码
	ERROR_1042(1042,"操作过于频繁"),
	//交易编码
	ERROR_1041(1041,"您的上一次举报尚未受理"),
	//交易编码
	ERROR_1040(1040,"订单状态变更失败"),
	//交易编码
	ERROR_1039(1039,"支付金额不匹配"),
	//交易编码
	ERROR_1038(1038,"支付订单不存在"),
	//交易编码
	ERROR_1037(1037,"创建支付订单失败"),
	//交易编码
	ERROR_1036(1036,"获取UnionId失败"),
	//交易编码
	ERROR_1035(1035,"该昵称已被占用"),
	//交易编码
	ERROR_1034(1034,"配置有误"),
	//交易编码
	ERROR_1033(1033,"连接第三方服务器失败"),
	//交易编码
	ERROR_1032(1032,"图片类型有误"),
	//交易编码
	ERROR_1031(1031,"该消息已过期"),
	//交易编码
	ERROR_1030(1030,"操作失败"),
	//交易编码
	ERROR_1029(1029,"对方不是您的好友"),
	//交易编码
	ERROR_1028(1028,"对方已是您的好友"),
	//交易编码
	ERROR_1027(1027,"连接消息服务器失败"),
	//交易编码
	ERROR_1026(1026,"您的账号被禁用"),
	//交易编码
	ERROR_1025(1025,"日期不正确"),
	//交易编码
	ERROR_1024(1024,"文件上传失败"),
	//交易编码
	ERROR_1023(1023,"该文件后缀不允许上传"),
	//交易编码
	ERROR_1022(1022,"用户不存在"),
	//交易编码
	ERROR_1021(1021,"更新用户账务信息失败"),
	//交易编码
	ERROR_1020(1020,"初始化用户账务信息失败"),
	//交易编码
	ERROR_1019(1019,"更新用户基础信息失败"),
	//交易编码
	ERROR_1018(1018,"初始化用户基础信息失败"),
	//交易编码
	ERROR_1017(1017,"验证码已过期"),
	//交易编码
	ERROR_1016(1016,"该邮箱已被使用"),
	//交易编码
	ERROR_1015(1015,"该手机号已被使用"),
	//交易编码
	ERROR_1014(1014,"验证码发送失败"),
	//交易编码
	ERROR_1013(1013,"验证码发送过于频繁"),
	//交易编码
	ERROR_1012(1012,"暂无数据"),
	//交易编码
	ERROR_1011(1011,"登录超时"),
	//交易编码
	ERROR_1010(1010,"密码不正确"),
	//交易编码
	ERROR_1009(1009,"用户不存在"),
	//交易编码
	ERROR_1008(1008,"加锁超时"),
	//交易编码
	ERROR_1007(1007,"缺少Cmd&Action参数"),
	//交易编码
	ERROR_1006(1006,"参数格式不正确"),
	//交易编码
	ERROR_1005(1005,"参数不能为空"),
	//交易编码
	ERROR_1004(1004,"网络繁忙，请稍后再试"),
	//交易编码
	ERROR_1003(1003,"Action参数定义不正确"),
	//交易编码
	ERROR_1002(1002,"Action未找到"),
	//交易编码
	ERROR_1001(1001,"Cmd未找到"),
	//交易编码
	
	// 公共模块
	/** 抱歉，您暂无此权限 */
	ERROR_503(503, "抱歉，您暂无此权限"),
	/** 网络繁忙，请稍后重试 */
	ERROR_502(502, "网络繁忙，请稍后重试"),
	/** 参数错误 */
	ERROR_501(501, "参数错误"),
	SUCCESS_0(0,"SUCCESS");
	
	
	private int code;
	private String msg;
	
	private ErrorCode(int code,String msg){
		this.code = code;
		this.msg = msg;
	}
	
	public int getCode() {
		return code;
	}
	public String getMsg() {
		return msg;
	}
	
	public void setMsg(String msg) {
		this.msg = msg;
	}
	public CmdException builderException(String msg,String error) {
		CmdException exception=new CmdException(this);
		exception.setMsg(msg);
		exception.setError(error);
		return exception;
	}
	
	public CmdException builderException() {
		CmdException exception=new CmdException(this);
		return exception;
	}
	
	public BaseRespVO builderResponse() {
		BaseRespVO resp=new BaseRespVO().pushErrorCode(this);
		return resp;
	}
}
